using System;
using System.Collections.Generic;

namespace InsuranceQuoteApp
{
    // Model class representing Insuree
    public class Insuree
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string EmailAddress { get; set; }
        public DateTime DateOfBirth { get; set; }
        public int CarYear { get; set; }
        public string CarMake { get; set; }
        public string CarModel { get; set; }
        public int SpeedingTickets { get; set; }
        public bool HasDUI { get; set; }
        public bool IsFullCoverage { get; set; }
        public decimal Quote { get; set; }
    }

    class Program
    {
        // Simulate a "database" using an in-memory list
        private static List<Insuree> insurees = new List<Insuree>();

        static void Main(string[] args)
        {
            Console.WriteLine("Welcome to the Insurance Quote App!");

            // Create a new insuree by collecting user inputs
            Insuree newInsuree = new Insuree();

            Console.Write("Enter First Name: ");
            newInsuree.FirstName = Console.ReadLine();

            Console.Write("Enter Last Name: ");
            newInsuree.LastName = Console.ReadLine();

            Console.Write("Enter Email Address: ");
            newInsuree.EmailAddress = Console.ReadLine();

            Console.Write("Enter Date of Birth (YYYY-MM-DD): ");
            newInsuree.DateOfBirth = DateTime.Parse(Console.ReadLine());

            Console.Write("Enter Car Year: ");
            newInsuree.CarYear = int.Parse(Console.ReadLine());

            Console.Write("Enter Car Make: ");
            newInsuree.CarMake = Console.ReadLine();

            Console.Write("Enter Car Model: ");
            newInsuree.CarModel = Console.ReadLine();

            Console.Write("Enter Number of Speeding Tickets: ");
            newInsuree.SpeedingTickets = int.Parse(Console.ReadLine());

            Console.Write("Do you have a DUI (yes/no)? ");
            newInsuree.HasDUI = Console.ReadLine().ToLower() == "yes";

            Console.Write("Is this Full Coverage (yes/no)? ");
            newInsuree.IsFullCoverage = Console.ReadLine().ToLower() == "yes";

            // Calculate the insurance quote
            newInsuree.Quote = CalculateQuote(newInsuree);

            // Store the insuree in the list (simulated database)
            insurees.Add(newInsuree);

            // Display the calculated quote
            Console.WriteLine($"\nQuote for {newInsuree.FirstName} {newInsuree.LastName}: ${newInsuree.Quote}");

            // Simulate an admin view of all quotes
            Console.WriteLine("\nAdmin View - All Issued Quotes:");
            foreach (var insuree in insurees)
            {
                Console.WriteLine($"{insuree.FirstName} {insuree.LastName}, Email: {insuree.EmailAddress}, Quote: ${insuree.Quote}");
            }
        }

        // Method to calculate the insurance quote based on business rules
        private static decimal CalculateQuote(Insuree insuree)
        {
            decimal quote = 50m; // Base price per month

            // Calculate age
            int age = DateTime.Now.Year - insuree.DateOfBirth.Year;
            if (DateTime.Now < insuree.DateOfBirth.AddYears(age)) age--;

            // Age-based pricing
            if (age <= 18) quote += 100;
            else if (age >= 19 && age <= 25) quote += 50;
            else if (age >= 26) quote += 25;

            // Car year-based pricing
            if (insuree.CarYear < 2000) quote += 25;
            else if (insuree.CarYear > 2015) quote += 25;

            // Porsche-specific pricing
            if (insuree.CarMake.ToLower() == "porsche")
            {
                quote += 25;
                if (insuree.CarModel.ToLower() == "911 carrera") quote += 25;
            }

            // Add $10 for each speeding ticket
            quote += insuree.SpeedingTickets * 10;

            // Add 25% for a DUI
            if (insuree.HasDUI) quote += quote * 0.25m;

            // Add 50% for full coverage
            if (insuree.IsFullCoverage) quote += quote * 0.50m;

            return quote;
        }
    }
}
